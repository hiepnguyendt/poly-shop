export declare function getIsRtl(element: null | HTMLElement | SVGElement): boolean;
export declare function getOffsetInlineStart(element: HTMLElement): number;
/**
 * The scrollLeft value will be a negative number if the direction is RTL and
 * needs to be converted to a positive value for direction independent scroll
 * computations. Additionally, the scrollLeft value can be a decimal value on
 * systems using display scaling requiring the floor and ceiling calls.
 */
export declare function getScrollInlineStart(element: HTMLElement): number;
/**
 * The clientX position needs to be converted so it is relative to the right of
 * the document in order for computations to yield the same result in both
 * element directions.
 */
export declare function getLogicalClientX(event: PointerEvent, IsRtl: boolean): number;
/**
 * The getBoundingClientRect() function returns values relative to the top left
 * corner of the document regardless of document direction. The left/right position
 * will be transformed to insetInlineStart based on element direction in order to
 * support direction agnostic position computation.
 */
export declare function getLogicalBoundingClientRect(element: HTMLElement | SVGElement): {
    blockSize: number;
    inlineSize: number;
    insetBlockStart: number;
    insetBlockEnd: number;
    insetInlineStart: number;
    insetInlineEnd: number;
};
/**
 * The pageX position needs to be converted so it is relative to the right of
 * the document in order for computations to yield the same result in both
 * element directions.
 */
export declare function getLogicalPageX(event: MouseEvent): number;
//# sourceMappingURL=direction.d.ts.map